<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>现代技能栈 – Ops</title><link>https://xiaoping378.github.io/tags/ops/</link><description>Recent content in Ops on 现代技能栈</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 03 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://xiaoping378.github.io/tags/ops/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Windows Terminal终端入坑指南</title><link>https://xiaoping378.github.io/docs/3-devops/windows-terminal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xiaoping378.github.io/docs/3-devops/windows-terminal/</guid><description>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>为了这个东西，重新安装了系统，目前是在windows LTSC 2021版本下的使用指南。
在IT界Terminal和Console差不多是一个意思，同属于界面层面的，不少人老和Shell搞混了，特此说明下Shell一般是指的Bash、zsh、PowerShell、cmd等。&lt;/p>
&lt;/div>
&lt;h2 id="安装">安装&lt;/h2>
&lt;p>为了使用Windows Terminal，在春节期间，重新安装了LTSC 2021版本的系统（之前一直用的LTSC 2019）。&lt;/p>
&lt;blockquote>
&lt;p>它对操作系统内部版本的最低要求为 &lt;code>18362.0&lt;/code>，通过&lt;code>Win+R&lt;/code>输入&lt;code>winver&lt;/code>可以确认本机系统是否支持。&lt;/p>
&lt;/blockquote>
&lt;p>目前有三种办法安装（本人选用的第二种）:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>是在应用商店中搜索&lt;code>Windows Terminal&lt;/code>，安装即可。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通过&lt;a href="https://github.com/microsoft/terminal/releases">Github release&lt;/a>页面下载安装包，&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="color:#a2f">Add-AppxPackage&lt;/span> Microsoft.WindowsTerminal_&amp;lt;versionNumber&amp;gt;.msixbundle
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>通过命令行&lt;a href="https://github.com/microsoft/winget-cli">winget&lt;/a>、&lt;a href="https://chocolatey.org/">Chocolatey &lt;/a>、&lt;a href="https://scoop.sh/">Scoop &lt;/a>安装，下面以winget为例：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-powershell" data-lang="powershell">winget install --id=Microsoft.WindowsTerminal -e
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="配置">配置&lt;/h2>
&lt;p>现在基本可以图形界面配置了，按照自己的习惯图形操作即可，网上一坨坨的教程，此处不表。&lt;/p>
&lt;p>&lt;img src="https://xiaoping378.github.io/images/windows-terminal-2022-01-30-12-53-50.png" alt="">&lt;/p>
&lt;p>默认配置保存在了&lt;code>%LOCALAPPDATA%\Packages\Microsoft.WindowsTerminal_8wekyb3d8bbwe\LocalState\settings.json&lt;/code>&lt;/p>
&lt;h2 id="技巧">技巧&lt;/h2>
&lt;ol>
&lt;li>快捷键
&lt;ul>
&lt;li>新建终端 -- &lt;code>Ctrl+Shift+t&lt;/code>&lt;/li>
&lt;li>切换终端 -- &lt;code>Alt + Num&lt;/code> , （我这里修改过了）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Quake窗口
&lt;ul>
&lt;li>快捷键是&lt;strong>Win + `&lt;/strong> , 可以快速从屏幕上半区换出终端窗口&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="gitbash">GitBash&lt;/h2>
&lt;p>&lt;img src="https://xiaoping378.github.io/images/windows-terminal-2022-01-30-23-03-08.png" alt="">&lt;/p>
&lt;p>本人环境&lt;code>VSCode&lt;/code>和&lt;a href="https://git-scm.com/download/win">git-bash&lt;/a>都是绿色版本了，免去了每次重装系统，都进行各种重复的配置操作.&lt;/p>
&lt;blockquote>
&lt;p>没有环境的可以自行通过上面的连接下载GitBash，后面有时间会尝试下&lt;code>WSL&lt;/code>和WSL2。&lt;/p>
&lt;/blockquote>
&lt;h3 id="中文乱码">中文乱码&lt;/h3>
&lt;p>需要添加环境变量到&lt;code>~/.bashrc&lt;/code>或者&lt;code>~/.zshrc&lt;/code>中。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#a2f">export&lt;/span> &lt;span style="color:#b8860b">LANG&lt;/span>&lt;span style="color:#666">=&lt;/span>zh_CN.UTF-8
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="绿色改造">绿色改造&lt;/h3>
&lt;p>绿色改造的核心，一个是安装时不默认安装在C盘，另一个就是设置&lt;code>HOME&lt;/code>的系统环境变量，Git-Bash每次启动是可以根据&lt;code>HOME&lt;/code>变量，决定加载配置的路径的。&lt;/p>
&lt;p>设置系统环境变量，两种办法：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>图形界面操作： &lt;code>Win+x&lt;/code> -&amp;gt; 系统 -&amp;gt; 高级系统设置 -&amp;gt; 环境变量, 自行添加&lt;code>HOME&lt;/code>变量。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在PowerShell命令行中设置环境变量，执行完即可生效。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="color:#800">[Environment]&lt;/span>::SetEnvironmentVariable(&lt;span style="color:#b44">&amp;#34;HOME&amp;#34;&lt;/span>, &lt;span style="color:#b44">&amp;#34;D:\xxp&amp;#34;&lt;/span>, &lt;span style="color:#b44">&amp;#34;User&amp;#34;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>我这里是&lt;code>D:\xxp&lt;/code>目录，这样的话，那些&lt;code>ssh、git、vscode、bash、zsh&lt;/code>的自定义配置，都可以免去重装再来一次的痛苦了。&lt;/p>
&lt;p>还可以把日常用到&lt;code>exe&lt;/code>小工具，也放到&lt;code>$HOME/bin&lt;/code>目录下，再加到&lt;code>PATH&lt;/code>环境变量里。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="color:#800">[Environment]&lt;/span>::SetEnvironmentVariable(&lt;span style="color:#b44">&amp;#34;Path&amp;#34;&lt;/span>, &lt;span style="color:#800">[Environment]&lt;/span>::GetEnvironmentVariable(&lt;span style="color:#b44">&amp;#34;Path&amp;#34;&lt;/span>, &lt;span style="color:#b44">&amp;#34;User&amp;#34;&lt;/span>) + &lt;span style="color:#b44">&amp;#34;;D:\xxp\bin&amp;#34;&lt;/span>,&lt;span style="color:#b44">&amp;#34;User&amp;#34;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="oh-my-zsh主题改造">oh-my-zsh主题改造&lt;/h3>
&lt;p>&lt;del>现在有人直接把zsh装上，然后再安装github上的oh-my-zsh主题，但是启动速度会慢一些，本来bash就比cmd启动慢了，，，&lt;/del>&lt;/p>
&lt;p>&lt;del>我是在bash的基础上改造下主题，修改&lt;code>Git\etc\profile.d\git-prompt.sh&lt;/code>文件，详见&lt;a href="https://gist.github.com/xiaoping378/8d636ddfdcf68982b93b65acbd5dcd83">这里&lt;/a>&lt;/del>&lt;/p>
&lt;p>之前一直是Bash的基础上，修改了下主题凑活用着。其实可以直接使用zsh的，记录下大致操作。&lt;/p>
&lt;blockquote>
&lt;p>之前在网上看过的的教程大多是在&lt;code>bashrc&lt;/code>里再启动&lt;code>zsh&lt;/code>，会慢上加慢的，我就一直没弄，后来觉得是可以做个&lt;code>Git-zsh&lt;/code>环境的。&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>&lt;a href="https://mirror.msys2.org/msys/x86_64/zsh-5.8-5-x86_64.pkg.tar.zst">下载&lt;/a>zsh二进制&lt;/li>
&lt;/ol>
&lt;p>现在msys2上的安装包，都变成zst格式（Facebook家出的）的压缩包了，还需要下载解压工具，我平常使用的就是7z，这里找了个&lt;a href="https://github.com/mcmilk/7-Zip-zstd/releases">7z with ZS&lt;/a>的工具。&lt;/p>
&lt;p>解压到GitBash安装的根目录上。主要是&lt;code>/etc/zsh&lt;/code>和&lt;code>/usr&lt;/code>目录。&lt;/p>
&lt;ol start="2">
&lt;li>安装oh-my-zsh主题&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sh -c &lt;span style="color:#b44">&amp;#34;&lt;/span>&lt;span style="color:#a2f;font-weight:bold">$(&lt;/span>curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh&lt;span style="color:#a2f;font-weight:bold">)&lt;/span>&lt;span style="color:#b44">&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>terminal和vscode中使用zsh.exe&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>直接指定&lt;code>zsh.exe&lt;/code>的路径&lt;/li>
&lt;li>还需要在&lt;code>~/.zshrc&lt;/code>的&lt;code>PATH&lt;/code>里添加&lt;code>/mingw64/bin&lt;/code>，不然会提示找不到git，&lt;/li>
&lt;/ul>
&lt;p>如下是Terminal的配置：
&lt;img src="https://xiaoping378.github.io/images/windows-terminal-2022-01-30-23-18-29.png" alt="">&lt;/p>
&lt;p>如下是vscode中的配置：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json"> &lt;span style="color:#b44">&amp;#34;terminal.integrated.profiles.windows&amp;#34;&lt;/span>&lt;span style="">:&lt;/span> {
&lt;span style="color:#008000;font-weight:bold">&amp;#34;git-bash&amp;#34;&lt;/span>: {
&lt;span style="color:#008000;font-weight:bold">&amp;#34;path&amp;#34;&lt;/span>: &lt;span style="color:#b44">&amp;#34;D:\\Softwares\\Git\\usr\\bin\\zsh.exe&amp;#34;&lt;/span>,
&lt;span style="color:#008000;font-weight:bold">&amp;#34;args&amp;#34;&lt;/span>: []
}
}&lt;span style="">,&lt;/span>
&lt;span style="color:#b44">&amp;#34;terminal.integrated.defaultProfile.windows&amp;#34;&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#b44">&amp;#34;git-bash&amp;#34;&lt;/span>&lt;span style="">,&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: TiDB初体验</title><link>https://xiaoping378.github.io/docs/3-devops/tidb/tidb-%E5%88%9D%E4%BD%93%E9%AA%8C/</link><pubDate>Thu, 03 Feb 2022 00:00:00 +0000</pubDate><guid>https://xiaoping378.github.io/docs/3-devops/tidb/tidb-%E5%88%9D%E4%BD%93%E9%AA%8C/</guid><description>
&lt;h2 id="安装">安装&lt;/h2>
&lt;blockquote>
&lt;p>安装环境要求：&lt;/p>
&lt;ul>
&lt;li>Mac或者单机Linux环境&lt;/li>
&lt;li>可以连接外网&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;ol>
&lt;li>执行命令安装&lt;code>TiUP&lt;/code>工具，官方运维管理工具。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">curl --proto &lt;span style="color:#b44">&amp;#39;=https&amp;#39;&lt;/span> --tlsv1.2 -sSf https://tiup-mirrors.pingcap.com/install.sh | sh
&lt;/code>&lt;/pre>&lt;/div>&lt;p>命令会有关键信息输出:添加了证书、修改了PATH变量等，需要声明下环境变量，以使&lt;code>tiup&lt;/code>命令能被找到。&lt;/p>
&lt;ol start="2">
&lt;li>声明系统环境变量&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#080;font-style:italic"># 因个人环境，此处会有差异&lt;/span>
&lt;span style="color:#a2f">source&lt;/span> ~/.zshrc
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以&lt;code>echo $PATH&lt;/code>下，看到&lt;code>/root/.tiup/bin&lt;/code>被加到了最前面。&lt;/p>
&lt;ol start="3">
&lt;li>启动单实例集群&lt;/li>
&lt;/ol>
&lt;p>直接执行&lt;code>tiup playground&lt;/code>命令默认会运行最新版本的TiDB集群，其中TiDB Server、TiKV、PD 和 TiFlash 实例各 1 个：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">tiup playground
&lt;/code>&lt;/pre>&lt;/div>&lt;p>具体如下图所示，需要另开一个终端，使用mysql发起连接：
&lt;img src="https://xiaoping378.github.io/images/github-dev-2022-02-04-16-16-18.png" alt="">&lt;/p>
&lt;p>目前tidb playground默认启动监听在127的地址，可以通过--host参数更改，但还不能更改端口（经查代码是写死了端口）。&lt;/p>
&lt;ul>
&lt;li>其他可修改参数，可通过&lt;code>tiup playground -h&lt;/code>查看。&lt;/li>
&lt;li>dashboard的默认root用户没有密码，如果是公网暴露了，建议如下添加密码(我这里设置了root密码为&lt;code>tidb&lt;/code>):&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">mysql -h127.0.0.1 -P4000 -uroot
alter user &lt;span style="color:#b44">&amp;#39;root&amp;#39;&lt;/span> identified by &lt;span style="color:#b44">&amp;#39;tidb&amp;#39;&lt;/span>;
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>grafana的登录密码，默认为admin/admin&lt;/li>
&lt;li>&lt;code>tiup update --self&lt;/code>可升级tiup命令&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>mysql客户端可通过&lt;code>yum install -y mysql&lt;/code>或者&lt;code>apt install mysql-client&lt;/code>安装。&lt;/p>
&lt;/blockquote>
&lt;h2 id="集群">集群&lt;/h2>
&lt;p>没有多节点的环境，折腾了一下，要单机玩这个模式的话，需要hack的东西太多，，，目前还不建议这么搞，等有时间看能不能提个PR.&lt;/p>
&lt;h2 id="tidb-server">TIDB Server&lt;/h2>
&lt;p>处理client的SQL请求.&lt;/p>
&lt;h2 id="pd">PD&lt;/h2>
&lt;p>提供全局时钟和Region调度和管理（扩缩容）。&lt;/p>
&lt;h2 id="tikv">TIKV&lt;/h2>
&lt;p>使用rocksDB实现数据持久化，基于此实现了分布式存储引擎，其中的核心点可以理解为以下三点：&lt;/p>
&lt;ul>
&lt;li>事务&lt;/li>
&lt;li>MVCC&lt;/li>
&lt;li>Raft&lt;/li>
&lt;/ul>
&lt;h3 id="分布式事务percolator">分布式事务Percolator&lt;/h3>
&lt;p>基于时间戳的两阶段提交事务解决方案。&lt;/p>
&lt;h3 id="mvcc多版本并发控制">MVCC多版本并发控制&lt;/h3>
&lt;p>&lt;code>COW&lt;/code>的本质。默认revision大的为最新值，&lt;/p>
&lt;h3 id="多副本raft一致性">多副本Raft一致性&lt;/h3>
&lt;p>&lt;strong>Leader选举：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>Term&lt;/code>状态变化，follower -&amp;gt; (random timeout) -&amp;gt; candidate -&amp;gt; leader. 此过程因为网络延迟问题，很可能是进行多轮选举。&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code class="language-plantuml" data-lang="plantuml">@startuml
!theme aws-orange
TiKV1 -&amp;gt; TiKV1: 随机选举时间到，切换为candidate角色，进入term2，发出选举信息
TiKV1 -&amp;gt; TiKV2: 发起选举，term=2
TiKV1 -&amp;gt; TiKV3: 发起选举，term=2
TiKV2 -&amp;gt; TiKV2: 对比term（非拜占庭环境，大家默认信任term大的）
TiKV3 -&amp;gt; TiKV3: 对比term
TiKV2 -&amp;gt; TiKV1: 投一票
TiKV3 -&amp;gt; TiKV1: 投一票
TiKV1 -&amp;gt; TiKV1: 超过一半投票（2x+1），成为Leader
TiKV1 -&amp;gt; TiKV2: 心跳保活
TiKV1 -&amp;gt; TiKV3: 心跳保活
TiKV1 -&amp;gt; TiKV1: 异常了
TiKV2 -&amp;gt; TiKV2: 心跳超时，切换candidate角色，进入term3
TiKV2 -&amp;gt; TiKV3: 发起选举
TiKV3 -&amp;gt; TiKV2: 对比term，并投一票
TiKV2 -&amp;gt; TiKV2: 加上自己的一票，超过一半投票，成为Leader
@enduml
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>leader负责读写请求，follower负责数据多副本复制。日常心跳保活，出问题后，重新选举。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>数据写入&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>propose -&amp;gt; append (local) -&amp;gt; Replicate (remote append) -&amp;gt; commited -&amp;gt; apply&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code class="language-plantuml" data-lang="plantuml">@startuml
!theme aws-orange
用户 -&amp;gt; TiDB_Server: 发起事务数据写入
TiDB_Server -&amp;gt; TiDB_Server: 解析语句，SQL -&amp;gt; KV
TiDB_Server -&amp;gt; PD: 获取KV元信息
PD -&amp;gt; TiDB_Server: 告知该key的range leader信息（TiKV1）
TiDB_Server -&amp;gt; TiKV1: 发起propose
TiKV1 -&amp;gt; TiKV1: 本地append为raft_log
TiKV1 -&amp;gt; TiKV2: 发起Replicate复制
TiKV1 -&amp;gt; TiKV3: 发起Replicate复制
TiKV2 -&amp;gt; TiKV2: 本地append为raft_log
TiKV3 -&amp;gt; TiKV3: 本地append为raft_log
TiKV2 -&amp;gt; TiKV1: 反馈已记录成功
TiKV3 -&amp;gt; TiKV1: 反馈已记录成功
TiKV1 -&amp;gt; TiKV1: 收到大多数节点反馈，进入commited状态
TiKV1 -&amp;gt; TiKV2: 发起commited确认
TiKV1 -&amp;gt; TiKV3: 发起commited确认
TiKV2 -&amp;gt; TiKV1: 进入commited
TiKV3 -&amp;gt; TiKV1: 进入commited
TiKV1 -&amp;gt; TiKV1: 收到大多数节点反馈，进入apply状态，此时业务数据才算真正落盘
TiKV1 -&amp;gt; TiKV2: 发起apply确认
TiKV1 -&amp;gt; TiKV3: 发起apply确认
TiKV2 -&amp;gt; TiKV1: 进入apply
TiKV3 -&amp;gt; TiKV1: 进入apply
TiKV1 -&amp;gt; TiDB_Server: 收到一个apply成功反馈，即可反馈用户写入成功
TiDB_Server -&amp;gt; 用户: 反馈写入成功
@enduml
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>SQL事务的commit对应到这里的apply，这里的commited是指raft中记录上用户的数据更新了（多数据节点记录上用户的写入请求了）。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>数据读取：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>tidb server解析SQL语句 -&amp;gt; 从pd获取对应key的tikv节点信息 -&amp;gt;&lt;/li>
&lt;/ul></description></item></channel></rss>